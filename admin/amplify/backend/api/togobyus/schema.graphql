type UserOrganisers @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  usersID: ID! @index(name: "byUsers")
  organisersID: ID! @index(name: "byOrganisers")
  Organisers: Organisers @belongsTo
  Users: Users @belongsTo
}

type UserPlaces @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  usersID: ID! @index(name: "byUsers")
  Users: Users @belongsTo
  placesID: ID! @index(name: "byPlaces")
  Places: Places @belongsTo
}

type UserPromo @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  usersID: ID! @index(name: "byUsers")
  Users: Users @belongsTo
  promosID: ID! @index(name: "byPromos")
  Promos: Promos @belongsTo
}

type Promos @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  description: String
  percentage: Float
  amount: Float
  organisersID: ID! @index(name: "byOrganisers")
  Organisers: Organisers @belongsTo
  placesID: ID! @index(name: "byPlaces")
  Places: Places @belongsTo
  UserPromos: [UserPromo] @hasMany(indexName: "byPromos", fields: ["id"])
}

type UserEvent @model @auth(rules: [{allow: public, operations: [read]}, {allow: private}]) {
  id: ID!
  eventsID: ID! @index(name: "byEvents")
  usersID: ID! @index(name: "byUsers")
  Users: Users @belongsTo
  Events: Events @belongsTo
}

type Organisers @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  address: String
  type: String
  imageUrl: String
  Events: [Events] @hasMany(indexName: "byOrganisers", fields: ["id"])
  Promos: [Promos] @hasMany(indexName: "byOrganisers", fields: ["id"])
  UserOrganisers: [UserOrganisers] @hasMany(indexName: "byOrganisers", fields: ["id"])
}

type Events @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  placesID: ID! @index(name: "byPlaces")
  organisersID: ID! @index(name: "byOrganisers")
  name: String
  imageUrl: String
  start_time: AWSTime
  end_time: AWSTime
  date: AWSDate
  description: String
  Places: Places @belongsTo
  Organisers: Organisers @belongsTo
  UserEvents: [UserEvent] @hasMany(indexName: "byEvents", fields: ["id"])
}

type Places @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  name: String
  longitude: String
  latitude: String
  type: String
  city: String
  imageUrl: String
  Events: [Events] @hasMany(indexName: "byPlaces", fields: ["id"])
  open_time: AWSTime
  close_time: AWSTime
  open_days: [String]
  Promos: [Promos] @hasMany(indexName: "byPlaces", fields: ["id"])
  UserPlaces: [UserPlaces] @hasMany(indexName: "byPlaces", fields: ["id"])
  address: String
}

type Users @model @auth(rules: [{allow: public, operations: [read]}, {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}]) {
  id: ID!
  email: String
  fullName: String
  imageUrl: String
  UserEvents: [UserEvent] @hasMany(indexName: "byUsers", fields: ["id"])
  UserPromos: [UserPromo] @hasMany(indexName: "byUsers", fields: ["id"])
  UserPlaces: [UserPlaces] @hasMany(indexName: "byUsers", fields: ["id"])
  UserOrganisers: [UserOrganisers] @hasMany(indexName: "byUsers", fields: ["id"])
}
 